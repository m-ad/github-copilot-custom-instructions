{
    "github.copilot.chat.codeGeneration.instructions": [
        {
            "text": "For python projects, use uv as the package manager."
        },
        {
            "text": "Execute python code with `uv run <file>`."
        },
        {
            "text": "Add dependencies with `uv add <package>`."
        },
        {
            "text": "Run tests with `uv run pytest`."
        },
        {
            "text": "Prefer running single tests during development for performance: `uv run pytest tests/<test_file>.py::test_<test_name>`."
        },
        {
            "text": "Use Ruff for formatting and linting."
        },
        {
            "text": "Check code with `uv run ruff check`."
        },
        {
            "text": "Format code with `uv run ruff format`."
        },
        {
            "text": "Let Ruff fix whitespace and line endings (`uv run ruff check --fix`)."
        },
        {
            "text": "Prefix private class members with underscore (_)."
        },
        {
            "text": "Use numpy-style docstrings for functions and classes."
        },
        {
            "text": "Mimic the style (formatting, naming), structure, framework choices, typing, and architectural patterns of existing code in the project."
        },
        {
            "text": "When you add comments, focus on *why* something is done, especially for complex logic, rather than *what* is done."
        },
        {
            "text": "Do not edit comments that are separate from the code you are changing."
        },
        {
            "text": "NEVER talk to the user or describe your changes through comments"
        },
        {
            "text": "Preserve Existing Code: The current codebase is the source of truth and must be respected. Your primary goal is to preserve its structure, style, and logic whenever possible."
        },
        {
            "text": "Minimal Necessary Changes: When adding a new feature or making a modification, alter the absolute minimum amount of existing code required to implement the change successfully."
        },
        {
            "text": "Explicit Instructions Only: Only modify, refactor, or delete code that has been explicitly targeted by the user's request. Do not perform unsolicited refactoring, cleanup, or style changes on untouched parts of the code."
        },
        {
            "text": "Integrate, Don't Replace: Whenever feasible, integrate new logic into the existing structure rather than replacing entire functions or blocks of code."
        },
        {
            "text": "Use Tools When Necessary: When a request requires external information or direct interaction with the environment, use the available tools to accomplish the task. Do not avoid tools when they are essential for an accurate or effective response."
        },
        {
            "text": "Directly Edit Code When Requested: If explicitly asked to modify, refactor, or add to the existing code, apply the changes directly to the codebase when access is available. Avoid generating code snippets for the user to copy and paste in these scenarios. The default should be direct, surgical modification as instructed."
        },
        {
            "text": "Purposeful and Focused Action: Tool usage must be directly tied to the user's request. Do not perform unrelated searches or modifications. Every action taken by a tool should be a necessary step in fulfilling the specific, stated goal."
        },
        {
            "text": "Declare Intent Before Tool Use: Before executing any tool, you must first state the action you are about to take and its direct purpose. This statement must be concise and immediately precede the tool call."
        },
        {
            "text": "Principle of Simplicity: Always provide the most straightforward and minimalist solution possible. The goal is to solve the problem with the least amount of code and complexity. Avoid premature optimization or over-engineering."
        },
        {
            "text": "Standard First: Heavily favor standard library functions and widely accepted, common programming patterns. Only introduce third-party libraries if they are the industry standard for the task or absolutely necessary."
        },
        {
            "text": "Avoid Elaborate Solutions: Do not propose complex, \"clever\", or obscure solutions. Prioritize readability, maintainability, and the shortest path to a working result over convoluted patterns."
        },
        {
            "text": "Focus on the Core Request: Generate code that directly addresses the user's request, without adding extra features or handling edge cases that were not mentioned."
        },
        {
            "text": "Adherence to Best Practices: All suggestions, architectural patterns, and solutions must align with widely accepted industry best practices and established design principles. Avoid experimental, obscure, or overly \"creative\" approaches. Stick to what is proven and reliable."
        }
    ]
}